generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum ResearchFacilities {
  ADVANCED
  WELL_MAINTAINED
  SATISFACTORY
  BELOW_AVERAGE
  POOR
}

enum InternshipOpportunities {
  AVAILABLE
  LIMITED
  OCCASIONAL
  RARE
  UNAVAILABLE
}

enum UserRole {
  USER
  EDITOR
  ADVERTIZER
  OWNER
}

enum AdType {
  BANNER
  CAROUSEL
}

enum AdStatus {
  PAID
  UNPAID
}

enum Recommendation {
  RECOMMENDED
  NOT_RECOMMENDED
}

enum CampusSize {
  LARGE
  MEDIUM
  SMALL
}

enum Qualification {
  PHD
  MD
  JD
  ENGD
  DBA
  EDU
  MASTERS
}

model User {
  id        String     @id @default(uuid()) @map("_id")
  name      String
  email     String     @unique
  image     String
  role      UserRole   @default(USER)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  Bookmark  Bookmark[]
  Article   Article[]
  Reviews   Review[]
  question  question[]
}

model University {
  id                  String          @id @default(uuid()) @map("_id")
  university_name     String
  yearOfEstablishment Int
  viceChancellorName  String
  hasRepresentative   Boolean         @default(false)
  registrarName       String
  officialWebsite     String
  availableDegrees    String[]
  emailAddress        String
  phoneNumber         String
  faxNumber           String
  moreInfo            String
  rank                Int
  branches            Branch[]
  Reviews             Review[]
  Representative      Representative?
  question            question[]
}

model Department {
  id        String             @id @default(uuid()) @map("_id")
  shortName String             @unique
  fullName  String             @unique
  branches  DepartmentBranch[]
}

model Branch {
  id           String             @id @default(uuid()) @map("_id")
  name         String
  address      String
  helpline     String
  departments  DepartmentBranch[]
  University   University?        @relation(fields: [universityId], references: [id], onDelete: Cascade)
  universityId String?
}

model DepartmentBranch {
  id                       String                  @id @default(uuid()) @map("_id")
  department               Department              @relation(fields: [departmentId], references: [id])
  departmentId             String
  branch                   Branch                  @relation(fields: [branchId], references: [id], onDelete: Cascade)
  branchId                 String
  cost                     Float                   @default(0)
  min_gpa                  Int                     @default(5)
  acceptance               Int                     @default(0)
  internship_opportunities InternshipOpportunities
  campus_size              CampusSize
  research_facilities      ResearchFacilities
  qualification            Qualification[]

  @@unique([departmentId, branchId])
}

model FeaturedUniversity {
  id              String  @id @default(uuid()) @map("_id")
  university_name String
  image_url       String
  href            String?
}

model carousel {
  id        String  @id @default(uuid()) @map("_id")
  title     String
  image_url String
  href      String?
}

model Bookmark {
  id                   String   @id @default(uuid()) @map("_id")
  bookmark_title       String
  is_visible           Boolean  @default(true)
  choosedDepartmentId  String
  selectedUniversityId String[]
  User                 User?    @relation(fields: [userEmail], references: [email], onDelete: Cascade)
  userEmail            String?
}

model Article {
  id           String   @id @default(uuid()) @map("_id")
  title        String
  introduction String
  content      String
  imageUrl     String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  author       User     @relation(fields: [authorEmail], references: [email])
  authorEmail  String
}

model Review {
  id             String         @id @default(uuid()) @map("_id")
  user           User           @relation(fields: [userEmail], references: [email])
  userEmail      String
  university     University     @relation(fields: [universityId], references: [id])
  universityId   String
  recommendation Recommendation
  comment        String?
  createdAt      DateTime       @default(now())

  @@unique([userEmail, universityId])
}

model Feedback {
  id      String  @id @default(uuid()) @map("_id")
  email   String
  subject String
  msg     String
  marked  Boolean @default(false)
}

model Representative {
  id              String     @id @default(uuid()) @map("_id")
  universityId    String     @unique
  university      University @relation(fields: [universityId], references: [id])
  loggedinEmail   String
  supportingEmail String
  university_logo String
}

model question {
  id           String     @id @default(uuid()) @map("_id")
  universityId String
  university   University @relation(fields: [universityId], references: [id])
  question     String
  answer       String?
  userEmail    String
  user         User       @relation(fields: [userEmail], references: [email])
}
